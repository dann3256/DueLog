// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: companies.sql

package db

import (
	"context"
)

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const insertCompany = `-- name: InsertCompany :exec
INSERT INTO companies (name)
VALUES ($1)
`

func (q *Queries) InsertCompany(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertCompany, name)
	return err
}

const selectCompany = `-- name: SelectCompany :one
SELECT name FROM companies
WHERE id = $1
`

func (q *Queries) SelectCompany(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, selectCompany, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE companies
SET name = $1
WHERE id = $2
`

type UpdateCompanyParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.ExecContext(ctx, updateCompany, arg.Name, arg.ID)
	return err
}
