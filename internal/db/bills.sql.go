// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bills.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBill = `-- name: CreateBill :one
INSERT INTO bills (user_id, company_name, amount, due_date, is_paid, memo)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, company_name, amount, due_date, is_paid, paid_at, memo, created_at, updated_at, deleted_at
`

type CreateBillParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	CompanyName string         `json:"company_name"`
	Amount      string         `json:"amount"`
	DueDate     time.Time      `json:"due_date"`
	IsPaid      sql.NullBool   `json:"is_paid"`
	Memo        sql.NullString `json:"memo"`
}

func (q *Queries) CreateBill(ctx context.Context, arg CreateBillParams) (Bill, error) {
	row := q.db.QueryRowContext(ctx, createBill,
		arg.UserID,
		arg.CompanyName,
		arg.Amount,
		arg.DueDate,
		arg.IsPaid,
		arg.Memo,
	)
	var i Bill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyName,
		&i.Amount,
		&i.DueDate,
		&i.IsPaid,
		&i.PaidAt,
		&i.Memo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBillByID = `-- name: GetBillByID :one
SELECT id, user_id, company_name, amount, due_date, is_paid, paid_at, memo, created_at, updated_at, deleted_at FROM bills
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetBillByID(ctx context.Context, id uuid.UUID) (Bill, error) {
	row := q.db.QueryRowContext(ctx, getBillByID, id)
	var i Bill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyName,
		&i.Amount,
		&i.DueDate,
		&i.IsPaid,
		&i.PaidAt,
		&i.Memo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUnpaidBillsByUser = `-- name: GetUnpaidBillsByUser :many
SELECT id, user_id, company_name, amount, due_date, is_paid, paid_at, memo, created_at, updated_at, deleted_at FROM bills
WHERE user_id = $1
  AND is_paid = FALSE
  AND deleted_at IS NULL
ORDER BY due_date ASC
`

func (q *Queries) GetUnpaidBillsByUser(ctx context.Context, userID uuid.UUID) ([]Bill, error) {
	rows, err := q.db.QueryContext(ctx, getUnpaidBillsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bill
	for rows.Next() {
		var i Bill
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyName,
			&i.Amount,
			&i.DueDate,
			&i.IsPaid,
			&i.PaidAt,
			&i.Memo,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markBillAsPaid = `-- name: MarkBillAsPaid :exec
UPDATE bills
SET is_paid = TRUE
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) MarkBillAsPaid(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markBillAsPaid, id)
	return err
}

const softDeleteBill = `-- name: SoftDeleteBill :exec
UPDATE bills
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteBill(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteBill, id)
	return err
}

const updateBill = `-- name: UpdateBill :exec
UPDATE bills
SET company_name = $2,
    amount = $3,
    due_date = $4,
    is_paid = $5,
    memo = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateBillParams struct {
	ID          uuid.UUID      `json:"id"`
	CompanyName string         `json:"company_name"`
	Amount      string         `json:"amount"`
	DueDate     time.Time      `json:"due_date"`
	IsPaid      sql.NullBool   `json:"is_paid"`
	Memo        sql.NullString `json:"memo"`
}

func (q *Queries) UpdateBill(ctx context.Context, arg UpdateBillParams) error {
	_, err := q.db.ExecContext(ctx, updateBill,
		arg.ID,
		arg.CompanyName,
		arg.Amount,
		arg.DueDate,
		arg.IsPaid,
		arg.Memo,
	)
	return err
}
