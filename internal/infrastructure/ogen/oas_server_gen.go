// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// BanksIDGet implements GET /banks/{id} operation.
	//
	// Get bank information.
	//
	// GET /banks/{id}
	BanksIDGet(ctx context.Context, params BanksIDGetParams) (BanksIDGetRes, error)
	// BanksPost implements POST /banks operation.
	//
	// Create bank.
	//
	// POST /banks
	BanksPost(ctx context.Context, req Name) (*Bank, error)
	// BillsGet implements GET /bills operation.
	//
	// Get bills.
	//
	// GET /bills
	BillsGet(ctx context.Context, params BillsGetParams) (*BillListResponse, error)
	// BillsIDDelete implements DELETE /bills/{id} operation.
	//
	// Delete bill.
	//
	// DELETE /bills/{id}
	BillsIDDelete(ctx context.Context, params BillsIDDeleteParams) error
	// BillsIDGet implements GET /bills/{id} operation.
	//
	// Get  bill.
	//
	// GET /bills/{id}
	BillsIDGet(ctx context.Context, params BillsIDGetParams) (*Bill, error)
	// BillsIDPaymentStatusPatch implements PATCH /bills/{id}/payment-status operation.
	//
	// Chenge payment-status.
	//
	// PATCH /bills/{id}/payment-status
	BillsIDPaymentStatusPatch(ctx context.Context, req *UpdatePaymentStatusRequest, params BillsIDPaymentStatusPatchParams) (*Bill, error)
	// BillsIDPut implements PUT /bills/{id} operation.
	//
	// Update bill.
	//
	// PUT /bills/{id}
	BillsIDPut(ctx context.Context, req *UpdateBillRequest, params BillsIDPutParams) (*Bill, error)
	// BillsPost implements POST /bills operation.
	//
	// Create bill.
	//
	// POST /bills
	BillsPost(ctx context.Context, req *CreateBillRequest) (BillsPostRes, error)
	// CompaniesIDDelete implements DELETE /companies/{id} operation.
	//
	// Delete bank.
	//
	// DELETE /companies/{id}
	CompaniesIDDelete(ctx context.Context, params CompaniesIDDeleteParams) error
	// CompaniesIDGet implements GET /companies/{id} operation.
	//
	// Get company information.
	//
	// GET /companies/{id}
	CompaniesIDGet(ctx context.Context, params CompaniesIDGetParams) (*Company, error)
	// CompaniesIDPut implements PUT /companies/{id} operation.
	//
	// Update bank.
	//
	// PUT /companies/{id}
	CompaniesIDPut(ctx context.Context, req *UpdateCompanyRequest, params CompaniesIDPutParams) (*Company, error)
	// CompaniesPost implements POST /companies operation.
	//
	// Create company.
	//
	// POST /companies
	CompaniesPost(ctx context.Context, req *CreateCompanyRequest) (*Company, error)
	// UsersGet implements GET /users operation.
	//
	// Get users.
	//
	// GET /users
	UsersGet(ctx context.Context, req *GetUserRequest) (UsersGetRes, error)
	// UsersIDDelete implements DELETE /users/{id} operation.
	//
	// Delete user.
	//
	// DELETE /users/{id}
	UsersIDDelete(ctx context.Context, params UsersIDDeleteParams) (UsersIDDeleteRes, error)
	// UsersIDGet implements GET /users/{id} operation.
	//
	// Get user.
	//
	// GET /users/{id}
	UsersIDGet(ctx context.Context, params UsersIDGetParams) (UsersIDGetRes, error)
	// UsersIDPut implements PUT /users/{id} operation.
	//
	// Update user.
	//
	// PUT /users/{id}
	UsersIDPut(ctx context.Context, req *UpdateUserRequest, params UsersIDPutParams) (UsersIDPutRes, error)
	// UsersPost implements POST /users operation.
	//
	// Create User.
	//
	// POST /users
	UsersPost(ctx context.Context, req *CreateUserRequest) (UsersPostRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
