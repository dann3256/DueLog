// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// Auth implements Auth operation.
	//
	// Authenticate User (Sign In or Sign Up).
	//
	// POST /auth
	Auth(ctx context.Context, req *AuthReq) (AuthRes, error)
	// BanksIDGet implements GET /banks/{id} operation.
	//
	// Get bank information.
	//
	// GET /banks/{id}
	BanksIDGet(ctx context.Context, params BanksIDGetParams) (BanksIDGetRes, error)
	// BanksPost implements POST /banks operation.
	//
	// Create bank.
	//
	// POST /banks
	BanksPost(ctx context.Context, req *CreateBankRequest) (BanksPostRes, error)
	// BillsIDDelete implements DELETE /bills/{id} operation.
	//
	// Delete bill.
	//
	// DELETE /bills/{id}
	BillsIDDelete(ctx context.Context, params BillsIDDeleteParams) (BillsIDDeleteRes, error)
	// BillsIDGet implements GET /bills/{id} operation.
	//
	// Get  bill.
	//
	// GET /bills/{id}
	BillsIDGet(ctx context.Context, params BillsIDGetParams) (BillsIDGetRes, error)
	// BillsIDPut implements PUT /bills/{id} operation.
	//
	// Update bill.
	//
	// PUT /bills/{id}
	BillsIDPut(ctx context.Context, req *UpdateBillRequest, params BillsIDPutParams) (BillsIDPutRes, error)
	// BillsPost implements POST /bills operation.
	//
	// Create bill.
	//
	// POST /bills
	BillsPost(ctx context.Context, req *CreateBillRequest) (BillsPostRes, error)
	// BillsStatementIDPut implements PUT /bills_statement/{id} operation.
	//
	// Change is_paid of bills.
	//
	// PUT /bills_statement/{id}
	BillsStatementIDPut(ctx context.Context, params BillsStatementIDPutParams) (BillsStatementIDPutRes, error)
	// CompaniesIDDelete implements DELETE /companies/{id} operation.
	//
	// Delete company.
	//
	// DELETE /companies/{id}
	CompaniesIDDelete(ctx context.Context, params CompaniesIDDeleteParams) (CompaniesIDDeleteRes, error)
	// CompaniesIDGet implements GET /companies/{id} operation.
	//
	// Get company information.
	//
	// GET /companies/{id}
	CompaniesIDGet(ctx context.Context, params CompaniesIDGetParams) (CompaniesIDGetRes, error)
	// CompaniesIDPut implements PUT /companies/{id} operation.
	//
	// Update company.
	//
	// PUT /companies/{id}
	CompaniesIDPut(ctx context.Context, params CompaniesIDPutParams) (CompaniesIDPutRes, error)
	// CompaniesPost implements POST /companies operation.
	//
	// Create company.
	//
	// POST /companies
	CompaniesPost(ctx context.Context, req *CreateCompanyRequest) (CompaniesPostRes, error)
	// PaydatePaymentDateGet implements GET /paydate/{payment_date} operation.
	//
	// Get bill by day.
	//
	// GET /paydate/{payment_date}
	PaydatePaymentDateGet(ctx context.Context, params PaydatePaymentDateGetParams) (PaydatePaymentDateGetRes, error)
	// UsersGet implements GET /users operation.
	//
	// Get users.
	//
	// GET /users
	UsersGet(ctx context.Context) (UsersGetRes, error)
	// UsersIDDelete implements DELETE /users/{id} operation.
	//
	// Delete user.
	//
	// DELETE /users/{id}
	UsersIDDelete(ctx context.Context, params UsersIDDeleteParams) (UsersIDDeleteRes, error)
	// UsersIDGet implements GET /users/{id} operation.
	//
	// Get user.
	//
	// GET /users/{id}
	UsersIDGet(ctx context.Context, params UsersIDGetParams) (UsersIDGetRes, error)
	// UsersIDPut implements PUT /users/{id} operation.
	//
	// Update user.
	//
	// PUT /users/{id}
	UsersIDPut(ctx context.Context, req *UpdateUserRequest, params UsersIDPutParams) (UsersIDPutRes, error)
	// UsersPost implements POST /users operation.
	//
	// Create User.
	//
	// POST /users
	UsersPost(ctx context.Context, req *CreateUserRequest) (UsersPostRes, error)
	// NewError creates *InternalServerErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *InternalServerErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
