// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (
  name,
  email
)
VALUES ($1, $2)
`

type InsertUserParams struct {
	Name  string
	Email string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser, arg.Name, arg.Email)
	return err
}

const selectUser = `-- name: SelectUser :many
SELECT id, name, email, password_hash, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SelectUser(ctx context.Context, id int32) ([]User, error) {
	rows, err := q.db.Query(ctx, selectUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $1, email = $2
WHERE id = $3 AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Name  string
	Email string
	ID    int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	return err
}
