// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BankName string

const (
	BankNameHukuginn  BankName = "hukuginn"
	BankNameIishin    BankName = "iishin"
	BankNameNishiginn BankName = "nishiginn"
)

func (e *BankName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BankName(s)
	case string:
		*e = BankName(s)
	default:
		return fmt.Errorf("unsupported scan type for BankName: %T", src)
	}
	return nil
}

type NullBankName struct {
	BankName BankName
	Valid    bool // Valid is true if BankName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBankName) Scan(value interface{}) error {
	if value == nil {
		ns.BankName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BankName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBankName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BankName), nil
}

type PaymentLimitDate string

const (
	PaymentLimitDateCurrentMonthEnd PaymentLimitDate = "current_month_end"
	PaymentLimitDateNextMonth15     PaymentLimitDate = "next_month_15"
	PaymentLimitDateNextMonth20     PaymentLimitDate = "next_month_20"
	PaymentLimitDateNextMonthEnd    PaymentLimitDate = "next_month_end"
)

func (e *PaymentLimitDate) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentLimitDate(s)
	case string:
		*e = PaymentLimitDate(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentLimitDate: %T", src)
	}
	return nil
}

type NullPaymentLimitDate struct {
	PaymentLimitDate PaymentLimitDate
	Valid            bool // Valid is true if PaymentLimitDate is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentLimitDate) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentLimitDate, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentLimitDate.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentLimitDate) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentLimitDate), nil
}

type Bank struct {
	ID   int32
	Name BankName
}

type Bill struct {
	ID           int32
	CompanyID    int32
	BankID       int32
	Amount       int32
	PaymentLimit int32
	PaymentDate  PaymentLimitDate
	PaidAt       pgtype.Timestamptz
	Description  pgtype.Text
	CreatedAt    pgtype.Timestamptz
	DeletedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type Company struct {
	ID       int32
	Name     string
	CreateAt pgtype.Timestamp
}

type User struct {
	ID           int32
	Name         string
	Email        string
	PasswordHash pgtype.Text
	DeletedAt    pgtype.Timestamptz
}
