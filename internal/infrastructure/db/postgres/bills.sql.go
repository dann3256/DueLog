// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bills.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteBill = `-- name: DeleteBill :exec
DELETE FROM bills
WHERE id = $1
`

func (q *Queries) DeleteBill(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBill, id)
	return err
}

const insertBill = `-- name: InsertBill :exec
INSERT INTO bills (
  id,
  company_id,
  bank_id,
  amount,
  payment_limit,
  payment_date,
  description
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type InsertBillParams struct {
	ID           int32
	CompanyID    int32
	BankID       int32
	Amount       int32
	PaymentLimit int32
	PaymentDate  PaymentLimitDate
	Description  pgtype.Text
}

func (q *Queries) InsertBill(ctx context.Context, arg InsertBillParams) error {
	_, err := q.db.Exec(ctx, insertBill,
		arg.ID,
		arg.CompanyID,
		arg.BankID,
		arg.Amount,
		arg.PaymentLimit,
		arg.PaymentDate,
		arg.Description,
	)
	return err
}

const selectBill = `-- name: SelectBill :many
SELECT 
  companies.name,
  banks.name,
  amount,
  payment_limit,
  payment_date
FROM
  bills
INNER JOIN
  banks ON bills.bank_id = banks.id
INNER JOIN
  companies ON companies.company_id = companies.id
`

type SelectBillRow struct {
	Name         string
	Name_2       string
	Amount       int32
	PaymentLimit int32
	PaymentDate  PaymentLimitDate
}

func (q *Queries) SelectBill(ctx context.Context) ([]SelectBillRow, error) {
	rows, err := q.db.Query(ctx, selectBill)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectBillRow
	for rows.Next() {
		var i SelectBillRow
		if err := rows.Scan(
			&i.Name,
			&i.Name_2,
			&i.Amount,
			&i.PaymentLimit,
			&i.PaymentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBill = `-- name: UpdateBill :exec
UPDATE bills 
SET  amount=$1,
     payment_limit=$2,
     payment_date=$3
WHERE id = $4
`

type UpdateBillParams struct {
	Amount       int32
	PaymentLimit int32
	PaymentDate  PaymentLimitDate
	ID           int32
}

func (q *Queries) UpdateBill(ctx context.Context, arg UpdateBillParams) error {
	_, err := q.db.Exec(ctx, updateBill,
		arg.Amount,
		arg.PaymentLimit,
		arg.PaymentDate,
		arg.ID,
	)
	return err
}
